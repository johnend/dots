#######################################
# QMK compile repo based
#######################################
function compile_qmk() {
  # Get the root directory of the current Git repo
  REPO_NAME=$(basename $(git rev-parse --show-toplevel) 2>/dev/null)

  # If we're not in a git repo, exit
  if [ -z "$REPO_NAME" ]; then
    echo "Error: Not a git repo"
    exit 1
  fi

  # Choose the compile command based on the repo name
  if [ "$REPO_NAME" = "vial-qmk" ]; then
    echo "Compiling firmware for Cyboard Imprint..."
    qmk compile -kb cyboard/imprint/imprint_number_row -km qc
  elif [ "$REPO_NAME" = "qmk_firmware" ]; then
    echo "Compiling firmware for Sofle..."
    qmk compile -kb sofle/rev1 -km johnend
  else
    echo "Error: Unknown repo"
    exit 1
  fi
}

#######################################
# Yarn and NPM script runner with fzf
#######################################
function run() {
  if cat package.json > /dev/null 2>&1; then
    scripts=$(cat package.json | jq .scripts | sed '1d;$d' | fzf --height 40%)

    if [[ -n $scripts ]]; then
      script_name=$(echo $scripts | awk -F ': ' '{gsub(/"/, "", $1); print $1}' | awk '{$1=$1};1')
      if cat yarn.lock > /dev/null 2>&1; then
        print -s "yarn run "$script_name;
        yarn run $script_name
      elif cat package.lock > /dev/null 2>&1; then
        print -s "npm run "$script_name;
        npm run $script_name
      fi
    else
      echo "🚨 Error: Nothing to run"
    fi
  else
    echo "🚨 Error: could not find package.json"
  fi
}

#######################################
# Make homebrew act like yay
#######################################
function brzf() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "brzf is only available on macOS."
    return 1
  fi

  if ! command -v brew &>/dev/null; then
    echo "Homebrew is not installed."
    return 1
  fi

  local cmd=""
  local arg=""

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --rm|-r)
        cmd="uninstall"
        ;;
      --cask|-c)
        cmd="cask"
        ;;
      --help|-h)
        echo "brzf: Interactive Homebrew with fuzzy search"
        echo ""
        echo "Usage:"
        echo "  brzf [query]             Search and install package (default)"
        echo "  brzf -r | --rm           Fuzzy uninstall installed package"
        echo "  brzf -c | --cask [query] Search and install GUI app (cask)"
        echo "  brzf -h | --help         Show this help message"
        return 0
        ;;
      *)
        arg="$1"
        ;;
    esac
    shift
  done

  case "$cmd" in
    uninstall)
      local choice
      choice=$(brew list | fzf --height=40% --prompt="❌ brzf: Uninstall > ")
      [[ -n "$choice" ]] && echo "🧼 Uninstalling $choice..." && brew uninstall "$choice" || echo "❌ No package selected."
      ;;

    cask)
      local choice
      choice=$(brew search --casks "$arg" | fzf --height=40% --prompt="🖥️ brzf: Cask > ")
      [[ -n "$choice" ]] && echo "📦 Installing cask: $choice..." && brew install --cask "$choice" || echo "❌ No cask selected."
      ;;

    *)
      local choice
      choice=$(brew search "$arg" | fzf --height=40% --prompt="🍺 brzf: Install > ")
      [[ -n "$choice" ]] && echo "🔧 Installing $choice..." && brew install "$choice" || echo "❌ No package selected."
      ;;
  esac
}
